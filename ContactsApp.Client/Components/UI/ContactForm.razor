@using ContactsApp.Client.Models.Enums

@inject ICategoryService CategoryService

@if (Contact is not null)
{
    <EditForm Model="Contact" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <div class="row p-2 g-3">
            <div class="col-12 col-md-4">
                @*Image Here*@
                <div class="square-img-container">
                    <img src="@(string.IsNullOrEmpty(Contact.ImageURL) ? ImageHelper.DefaultContactImage : Contact.ImageURL)" class="square-img" />
                </div>
                <div>
                    @*How uploads are done*@
                    <InputFile OnChange="OnFileChange" class="form-control mt-2" accept=".png, .jpg, .jpeg, .svg"></InputFile>
                    <span class="text-danger">@imageError</span>
                </div>
            </div>

            <div class="col-12 col-md-8">
                @*Form Data*@
                <div class="row g-2">

                    @*First Name*@
                    <div class="col-12 col-md-6">
                        <label for="firstName" class="form-label">First Name</label>
                        <InputText @bind-Value="Contact.FirstName" id="firstName" class="form-control" aria-label="First Name" placeholder="First Name" />
                        <ValidationMessage For="() => Contact.FirstName" />
                    </div>

                    @*Last Name*@
                    <div class="col-12 col-md-6">
                        <label for="lastName" class="form-label">Last Name</label>
                        <InputText @bind-Value="Contact.LastName" id="lastName" class="form-control" aria-label="Last Name" placeholder="Last Name" />
                        <ValidationMessage For="() => Contact.LastName" />
                    </div>

                    @*Email*@
                    <div class="col-12 col-md-6">
                        <label for="email" class="form-label">Email</label>
                        <InputText @bind-Value="Contact.Email" id="email" class="form-control" aria-label="Email" placeholder="Email" />
                        <ValidationMessage For="() => Contact.Email" />
                    </div>

                    @*Phone*@
                    <div class="col-12 col-md-6">
                        <label for="phone" class="form-label">Phone Number</label>
                        <InputText @bind-Value="Contact.PhoneNumber" id="phone" class="form-control" aria-label="Phone" placeholder="(000) 000-0000" />
                        <ValidationMessage For="() => Contact.PhoneNumber" />
                    </div>

                    @*Address1*@
                    <div class="col-12">
                        <label for="address1" class="form-label">Address</label>
                        <InputText @bind-Value="Contact.Address1" id="address1" class="form-control" aria-label="Address" placeholder="1234 Main Street" />
                        <ValidationMessage For="() => Contact.Address1" />
                    </div>

                    @*Address2*@
                    <div class="col-12">
                        <label for="address2" class="form-label">Address 2</label>
                        <InputText @bind-Value="Contact.Address2" id="address2" class="form-control" aria-label="Address 2" placeholder="Suite 103" />
                        <ValidationMessage For="() => Contact.Address2" />
                    </div>

                    @*City*@
                    <div class="col-12 col-md-6">
                        <label for="city" class="form-label">City</label>
                        <InputText @bind-Value="Contact.City" id="city" class="form-control" aria-label="City" placeholder="City" />
                        <ValidationMessage For="() => Contact.City" />
                    </div>

                    @*State*@
                    <div class="col-12 col-md-4">
                        <label class="form-label">State</label>
                        <InputSelect @bind-Value="Contact.State" class="form-select">
                            <option value="">Select State...</option>
                            @foreach (var state in Enum.GetValues<State>())
                            {
                                <option value="@state">
                                    @state.ToString()
                                </option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Contact.State" />
                    </div>

                    @*Zip Code*@
                    <div class="col-12 col-md-2">
                        <label for="zip" class="form-label">Zip Code</label>
                        <InputNumber @bind-Value="Contact.ZipCode" id="zip" class="form-control" aria-label="Zip Code" placeholder="Zip Code" />
                        <ValidationMessage For="() => Contact.ZipCode" />
                    </div>

                    @*Categories*@
                     <div class="col-12 col-md-6">
                        <label for="categories" class="form-label">Categories</label>
                        <InputSelect @bind-Value="selectedCategoryIds" class="form-select" multiple>
                            @foreach (var category in categories)
                            {
                                <option value="@category.Id">
                                    @category.Name
                                </option>
                            }
                        </InputSelect> 
                    </div> 

                    @*Alternate Categories*@
                    @* <div class="col-12 col-md-6">
                        <label for="categories" class="form-label">Categories</label>
                        <InputRadioGroup @bind-Value="selectedCategoryIds" id="categories" class="form-control me-2">
                            @foreach (var category in categories)
                            {
                                <InputRadio Value="@category.Id">@category.Name</InputRadio>    
                            }
                        </InputRadioGroup>
                    </div> *@

                    @*Birthday*@
                    <div class="col-12 col-md-6">
                        <label class="form-label" for="birthDate">Birthday</label>
                        <InputDate id="birthDate" @bind-Value="Contact.BirthDate" class="form-control"></InputDate>
                        <ValidationMessage For="() => Contact.BirthDate" />
                    </div>

                    @*Buttons*@
                    <div class="col-12 justify-content-end">
                        <a href="contacts" class="btn btn-lg btn-outline-secondary">Cancel</a>
                        <button type="submit" class="btn btn-lg btn-primary">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter, EditorRequired]
    public ContactDTO? Contact { get; set; }

    //Call back to send the DTO back up the chain
    [Parameter, EditorRequired]
    public EventCallback<ContactDTO> OnSubmit { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthStateTask { get; set; }

    private UserInfo? userInfo;
    private IEnumerable<CategoryDTO> categories = [];
    private int[] selectedCategoryIds = [];
    private string? imageError;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

            //get the categories
            categories = await CategoryService.GetCategoriesAsync(userInfo!.UserId);

            //get the selected categories for this contact

            selectedCategoryIds = Contact!.Categories.Select(c => c.Id).ToArray();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }



    private async Task HandleSubmit()
    {
        Contact!.Categories = selectedCategoryIds.Select(id => categories.First(c => c.Id == id)).ToList();

        if (string.IsNullOrEmpty(Contact.ImageURL))
        {
            Contact.ImageURL = "";
        }

        //send the DTO back up the chain
        await OnSubmit.InvokeAsync(Contact);
    }

    //how uploads are done
    private async Task OnFileChange(InputFileChangeEventArgs changeEvent)
    {
        imageError = null;
        if (changeEvent.File is null)
        {
            Contact!.ImageURL = ImageHelper.DefaultContactImage;

        }
        else if (changeEvent.File.Size > ImageHelper.MaxFileSize)
        {
            imageError = "Image too big. Image size must be less than 5 MB";
        }
        else
        {
            try
            {
                Contact!.ImageURL = await ImageHelper.GetDataUrl(changeEvent.File);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                imageError = "Could not red the selected file. Please try again.";
            }
        }
    }
}